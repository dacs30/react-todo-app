{"version":3,"sources":["Delete.js","Todo.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","IconButtons","classes","className","color","width","maxWidth","backgroundColor","palette","background","grey","CheckboxList","tasks","deleteTask","React","useState","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","List","map","labelId","ListItem","key","role","undefined","dense","button","onClick","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","id","primary","ListItemSecondaryAction","IconButton","aria-label","e","newTask","handleSubmit","handleChange","task","onSubmit","noValidate","autoComplete","Input","placeholder","style","inputlabelprops","onChange","type","App","state","Todo","this","event","preventDefault","console","log","setState","filter","item","textField","document","querySelector","focus","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd3249c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function IconButtons() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n        <DeleteIcon color=\"secondary\"/>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Delete from './Delete'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.grey,\r\n  },\r\n}));\r\n\r\nconst CheckboxList = ({tasks, deleteTask}) => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([0]);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {(tasks).map((value) => {\r\n        const labelId = `checkbox-list-label-${value}`;\r\n\r\n        return (\r\n          <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={checked.indexOf(value) !== -1}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={`${value}`} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"delete\" onClick={(e) => deleteTask(value, e)}>\r\n                <Delete/>\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default CheckboxList;","import React from 'react';\r\nimport { Input } from '@material-ui/core';\r\n\r\n\r\nconst newTask = ({handleSubmit, handleChange, task}) => {\r\n\r\n            return(\r\n        <div>\r\n            <form id=\"form\" onSubmit={handleSubmit} noValidate autoComplete=\"off\">\r\n                <Input \r\n                id=\"standard-basic\" \r\n                placeholder=\"Task\" \r\n                color=\"secondary\"\r\n                inputProps={{style: {color: 'white'}}}\r\n                inputlabelprops={{style: {color: 'grey'}}}\r\n                value={task}\r\n                onChange={handleChange}\r\n                />\r\n                <input \r\n                type=\"submit\" \r\n                value=\"Add task\"\r\n                style={{margin: \"10px\"}} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default newTask;","import React, {Component} from 'react';\nimport Todo from './Todo';\nimport Input from './Input';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tasks: [],\n      task: ''\n    }\n  }\n\n  \n  render() {\n    const deleteTask = (task, event) => {\n      event.preventDefault();\n      console.log(`deleted ${task}`)\n      this.setState({tasks: this.state.tasks.filter(item => {\n        return item !== task\n      })})\n    }\n\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      console.log(this.state.task);\n      if(this.state.task !== ''){\n        this.state.tasks.push(this.state.task);\n        this.setState({\n          tasks: this.state.tasks\n        })\n        this.setState({ // set the input field to empty again\n          task: ''\n      })\n      const textField = document.querySelector('#standard-basic');\n      textField.value = '';\n      textField.focus();\n      }\n    }\n\n    const handleChange = (event) => {\n      this.setState({\n          task: event.target.value\n      })\n    }\n    \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Todo List</h1>\n        <Todo tasks={this.state.tasks} deleteTask={deleteTask}/>\n        <Input handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        value={this.state.task}/>\n      </header>\n    </div>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}